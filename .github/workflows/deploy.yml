name: Deploy to AWS

on:
  push:
    branches:
      - main  # main 브랜치에 푸시될 때 자동 배포

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Cache Gradle packages
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Ensure gradlew is executable
        run: |
          if [ ! -x ./gradlew ]; then chmod +x gradlew; fi

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Build Project with Gradle
        run: ./gradlew clean build -x test  # 테스트 제외하고 빌드

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and Push Docker Image
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/jjami-backend-app:latest .
          docker push ${{ secrets.DOCKER_USERNAME }}/jjami-backend-app:latest

      # ✅ Nginx 관련 설정 파일 업로드
      - name: Upload Nginx Config Files to EC2
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.AWS_HOST }}
          username: ${{ secrets.AWS_USER }}
          key: ${{ secrets.AWS_PRIVATE_KEY }}
          source: "infra/deploy/nginx/*"
          target: "/home/ubuntu/app/infra/deploy/nginx"

      # ✅ 전체 프로젝트 업로드 (이전에는 특정 파일만 업로드)
      - name: Upload Project Files to EC2
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.AWS_HOST }}
          username: ${{ secrets.AWS_USER }}
          key: ${{ secrets.AWS_PRIVATE_KEY }}
          source: "."  # 🔥 프로젝트 전체를 업로드
          target: "/home/ubuntu/app"

      # ✅ EC2에서 배포 스크립트 실행
      - name: Deploy to AWS Server
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.AWS_HOST }}
          username: ${{ secrets.AWS_USER }}
          key: ${{ secrets.AWS_PRIVATE_KEY }}
          script: |
            cd /home/ubuntu/app
            chmod +x infra/deploy/scripts/deploy.sh
            ./infra/deploy/scripts/deploy.sh  # 🔥 최신 코드 및 Nginx 반영
